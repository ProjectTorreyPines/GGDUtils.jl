var documenterSearchIndex = {"docs":
[{"location":"#GGDUtils.jl","page":"GGDUtils.jl","title":"GGDUtils.jl","text":"","category":"section"},{"location":"#Installation","page":"GGDUtils.jl","title":"Installation","text":"","category":"section"},{"location":"","page":"GGDUtils.jl","title":"GGDUtils.jl","text":"Clone the repo and run make command:","category":"page"},{"location":"","page":"GGDUtils.jl","title":"GGDUtils.jl","text":"% GGDUtils % make help\nHelp Menu\n\nmake env_with_cloned_repo (or make r): Creates a Julia environment with the cloned repositories\nmake env_with_git_url (or make u): Creates a Julia environment with the git urls without creating local clones\nmake clean: Deletes Project.toml and Manifest.toml for a fresh start","category":"page"},{"location":"#Interpolations","page":"GGDUtils.jl","title":"Interpolations","text":"","category":"section"},{"location":"","page":"GGDUtils.jl","title":"GGDUtils.jl","text":"Several interpolation functions are available to create interpolaiton functions for data present in a GGD represented over a particular grid subset:","category":"page"},{"location":"","page":"GGDUtils.jl","title":"GGDUtils.jl","text":"interp\nget_TPS_mats","category":"page"},{"location":"#GGDUtils.interp","page":"GGDUtils.jl","title":"GGDUtils.interp","text":"interp(\nprop_values::Vector{T},\nkdtree::KDTree;\nuse_nearest_n::Int=4,\nweighing::Function=(d) -> 1 / d,\n\n) where {T <: Real}\n\nLowest level interpolation function. It takes a vector of property values and a KDTree defined over a 2D space with the same number of nodes as the property values. It returns a function that can be used to interpolate the property values at any point in the space.\n\n\n\n\n\ninterp(\ny::Vector{T},\nTPS_mats::Tuple{Matrix{U}, Matrix{U}, Matrix{U}, Vector{Tuple{U, U}}},\n\n) where {T <: Real, U <: Real}\n\nLowest level function for Thin Plate Spline method\n\n\n\n\n\ninterp(y::Vector{T}, x::Vector{Tuple{U, U}}) where {T <: Real, U <: Real}\n\nThin plate smoothing interpolation function for a 2d space scalar function. The algorithm has been adopted from:\n\nhttp://www.geometrictools.com/Documentation/ThinPlateSplines.pdf\n\nThis is an implementation of Euler-Lagrange equation for minimizing bending energy of a surface.\n\n\n\n\n\ninterp(\nprop_values::Vector{T},\nspace::IMASDD.edge_profiles__grid_ggd___space\n\n) where {T <: Real}\n\nIf the whole space is provided instead of a kdtree, calculate the kdtree for whole space. Again, here it is assumed that the property values are porvided for each node of the space.\n\n\n\n\n\ninterp(\nprop_values::Vector{Real},\nspace::IMASDD.edge_profiles__grid_ggd___space,\nsubset::IMASDD.edge_profiles__grid_ggd___grid_subset\n\n)\n\nIf a subset of the space is provided, calculate the kdtree for the subset. In this case it is assumed that the property values are provided for each element of the subset.\n\n\n\n\n\ninterp(\nprop::edge_profiles__prop_on_subset,\ngrid_ggd::IMASDD.edge_profiles__grid_ggd,\nvalue_field::Symbol=:values\n\n)\n\nExample: gridggd = dd.edgeprofiles.gridggd[1] getelectrondensity = interp(dd.edgeprofiles.ggd[1].electrons.density[1], gridggd) getefieldpar = interp(dd.edgeprofiles.ggd[1].efield[1], grid_ggd, :parallel)\n\n\n\n\n\ninterp(\nprop_arr::AbstractVector{T},\nspace::IMASDD.edge_profiles__grid_ggd___space,\nsubset::IMASDD.edge_profiles__grid_ggd___grid_subset,\nvalue_field::Symbol=:values\n\n) where {T <: edgeprofiles__propon_subset}\n\nExample: sol = getgridsubsetwithindex(dd.edgeprofiles.gridggd[1], 23) getelectrondensity = interp(dd.edge_profiles.ggd[1].electrons.density, space, sol)\n\n\n\n\n\ninterp(\nprop_arr::AbstractVector{T},\ngrid_ggd::IMASDD.edge_profiles__grid_ggd,\ngrid_subset_index::Int,\nvalue_field::Symbol=:values\n\n) where {T <: edgeprofiles__propon_subset}\n\nExample: getnesep = interp(dd.edgeprofiles.ggd[1].electrons.density, grid_ggd, 16)\n\n\n\n\n\ninterp(eqt::IMASDD.equilibrium__time_slice)\n\nFor a given equilibrium time slice, return a function that can be used to interpolate from (r, z) space to rho (normalized toroidal flux coordinate)space.\n\nExample: rz2rho = interp(dd.equilibrium.time_slice[1]) rho = rz2rho.([(r, z) for r in 3:0.01:9, for z in -5:0.01:5])\n\n\n\n\n\ninterp(\nprop::Vector{T},\nprof::IMASDD.core_profiles__profiles_1d,\n\n) where {T <: Real}\n\nReturns an inteprolation function for the core profile property values defined on normalized toroidal flux coordinate rho.\n\nExample: coreprofilene = dd.coreprofiles.profiles1d[1].electrons.density getne = interp(coreprofilene, dd.coreprofiles.profiles1d[1]) getne(1) # Returns electron density at rho = 1 (separatix)\n\n\n\n\n\ninterp(\nprop::Vector{T},\nprof::IMASDD.core_profiles__profiles_1d,\nrz2rho::Function,\n\n)\n\nReturns an inteprolation function in (R, Z) domain for the core profile property values defined on normalized toroidal flux coordinate rho and with a provided function to convert (R,Z) to rho.\n\nExample:\n\nrz2rho = interp(dd.equilibrium.timeslice[1]) coreprofilene = dd.coreprofiles.profiles1d[1].electrons.density getne = interp(coreprofilene, dd.coreprofiles.profiles1d[1], rz2rho) getn_e(5.0, 3.5) # Returns electron density at (R, Z) = (5.0, 3.5)\n\n\n\n\n\ninterp(\nprop::Vector{T},\nprof::IMASDD.core_profiles__profiles_1d,\neqt::IMASDD.equilibrium__time_slice,\n\n) where {T <: Real}\n\nReturns an inteprolation function in (R, Z) domain for the core profile property values defined on normalized toroidal flux coordinate rho and with a provided equilibrium time slice to get (R, Z) to rho conversion.\n\nExample:\n\neqt = dd.equilibrium.timeslice[1] coreprofilene = dd.coreprofiles.profiles1d[1].electrons.density getne = interp(coreprofilene, dd.coreprofiles.profiles1d[1], eqt) getn_e(5.0, 3.5) # Returns electron density at (R, Z) = (5.0, 3.5)\n\n\n\n\n\n","category":"function"},{"location":"#GGDUtils.get_TPS_mats","page":"GGDUtils.jl","title":"GGDUtils.get_TPS_mats","text":"get_TPS_mats(x::Vector{Tuple{U, U}}) where {U <: Real}\n\nWe can separate matrix operations of thin plate spline method to utilize the calculation for itnerpolating over same space. Similar to the idea of reusing KDTree like above.\n\n\n\n\n\n","category":"function"}]
}
